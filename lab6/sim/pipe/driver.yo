                            | #######################################################################
                            | # Test for copying block of size 3;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b804000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20300000000000000 | 	irmovq $3, %rdx		# src and dst have 3 elements
0x014: 30f61804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 807a02000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # name: Feng Yifei ID:520030910021
                            | # Describe how and why you modified the baseline code.
                            | #	1.change irmovq + rrmovq to iaddq to reduce cycles
                            | #	2.unroll Loop,considered CPE, I choose 6 times in each Loop
                            | #	3.to avoid Load/use hazard, insert another instruction between these two instructions to avoid the waste caused by bubbles
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 704e01000000000000   | 	jmp Test
                            | 		
0x044:                      | Loop:
0x044: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x04e: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# read val from src...
0x058: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x062: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x06c: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12	# read val from src...
0x076: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13	# read val from src...
0x080: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
                            | 
0x08a: 6288                 | 	andq %r8, %r8		# val <= 0?
0x08c: 719f00000000000000   | 	jle Judge1			# if so, goto Judge:
0x095: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x09f:                      | Judge1:
0x09f: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	# ...and store it to dst
0x0a9: 6299                 | 	andq %r9, %r9		# val <= 0?
0x0ab: 71be00000000000000   | 	jle Judge2			# if so, goto Judge:
0x0b4: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0be:                      | Judge2:
0x0be: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0c8: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0ca: 71dd00000000000000   | 	jle Judge3			# if so, goto Judge:
0x0d3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0dd:                      | Judge3:
0x0dd: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0e7: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0e9: 71fc00000000000000   | 	jle Judge4			# if so, goto Judge:
0x0f2: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0fc:                      | Judge4:
0x0fc: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)	# ...and store it to dst
0x106: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x108: 711b01000000000000   | 	jle Judge5			# if so, goto Judge:
0x111: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x11b:                      | Judge5:
0x11b: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)	# ...and store it to dst
0x125: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x127: 713a01000000000000   | 	jle Final			# if so, goto Final
0x130: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x13a:                      | Final:
0x13a: c0f73000000000000000 | 	iaddq $48, %rdi		# src++
0x144: c0f63000000000000000 | 	iaddq $48, %rsi		# dst++
                            | 
0x14e:                      | Test:
                            | 	
0x14e: c0f2faffffffffffffff | 	iaddq $-6, %rdx	
0x158: 754400000000000000   | 	jge Loop		# if len >= 6, goto Loop:
                            | 
0x161:                      | Test1:
0x161: c0f20300000000000000 | 	iaddq $3, %rdx	
0x16b: 75a301000000000000   | 	jge Test2	# len =3,  4，5
0x174: c0f20100000000000000 | 	iaddq $1, %rdx 
0x17e: 732702000000000000   | 	je r2		# len = 2
0x187: c0f20100000000000000 | 	iaddq $1, %rdx	
0x191: 735002000000000000   | 	je r1 		# len = 1
0x19a: 707902000000000000   | 	jmp Done		# len = 0
0x1a3:                      | Test2:
0x1a3: 73fe01000000000000   | 	je r3		# len = 3
0x1ac: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1b6: 73d501000000000000   | 	je r4		# len = 4
                            | 			# len = 5  直接落下
                            | 		
0x1bf:                      | r5:	
0x1bf: 50d72000000000000000 | 	mrmovq 32(%rdi), %r13	# read val from src...
0x1c9: 62dd                 | 	andq %r13, %r13
0x1cb: 40d62000000000000000 | 	rmmovq %r13, 32(%rsi)	# ...and store it to dst
                            | 
0x1d5:                      | r4:	
0x1d5: 50c71800000000000000 | 	mrmovq 24(%rdi), %r12	# read val from src...
0x1df: 71f201000000000000   | 	jle r41
0x1e8: c0f00100000000000000 | 	iaddq $1 ,%rax
                            | 
0x1f2:                      | r41:
0x1f2: 62cc                 | 	andq %r12, %r12
0x1f4: 40c61800000000000000 | 	rmmovq %r12, 24(%rsi)	# ...and store it to dst
                            | 
0x1fe:                      | r3:	
0x1fe: 50b71000000000000000 | 	mrmovq 16(%rdi), %r11	# read val from src...
0x208: 711b02000000000000   | 	jle r31
0x211: c0f00100000000000000 | 	iaddq $1 ,%rax
0x21b:                      | r31:
0x21b: 62bb                 | 	andq %r11, %r11
0x21d: 40b61000000000000000 | 	rmmovq %r11, 16(%rsi)	# ...and store it to dst
                            | 
0x227:                      | r2:	
0x227: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...
0x231: 714402000000000000   | 	jle r21
0x23a: c0f00100000000000000 | 	iaddq $1 ,%rax
0x244:                      | r21:
0x244: 62aa                 | 	andq %r10, %r10
0x246: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
                            | 
0x250:                      | r1:	
0x250: 50970000000000000000 | 	mrmovq (%rdi), %r9	# read val from src...
0x25a: 6299                 | 	andq %r9, %r9
0x25c: 40960000000000000000 | 	rmmovq %r9, (%rsi)	# ...and store it to dst
0x266: 717902000000000000   | 	jle Done
0x26f: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x279:                      | Done:
0x279: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x27a:                      | End:
                            | #/* $end ncopy-ys */
0x27a:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 3.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x27a:                      | check:
                            | 	# Return value test
0x27a: 30fa0300000000000000 | 	irmovq $3,%r10
0x284: 61a0                 | 	subq %r10,%rax
0x286: 73a202000000000000   | 	je checkb
0x28f: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x299: 70e003000000000000   | 	jmp cdone
0x2a2:                      | checkb:
                            | 	# Code length check
0x2a2: 30f07a02000000000000 | 	irmovq EndFun,%rax
0x2ac: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x2b6: 6120                 | 	subq %rdx,%rax
0x2b8: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x2c2: 6102                 | 	subq %rax,%rdx
0x2c4: 75e002000000000000   | 	jge checkm
0x2cd: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x2d7: 70e003000000000000   | 	jmp cdone
0x2e0:                      | checkm:
0x2e0: 30f21804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x2ea: 30f3e803000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x2f4: 30f70300000000000000 | 	irmovq $3,%rdi  # Count
0x2fe: 6277                 | 	andq %rdi,%rdi
0x300: 735e03000000000000   | 	je checkpre         # Skip check if count = 0
0x309:                      | mcloop:
0x309: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x313: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x31d: 6160                 | 	subq %rsi,%rax
0x31f: 733b03000000000000   | 	je  mok
0x328: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x332: 70e003000000000000   | 	jmp cdone
0x33b:                      | mok:
0x33b: 30f00800000000000000 | 	irmovq $8,%rax
0x345: 6002                 | 	addq %rax,%rdx	  # dest ++
0x347: 6003                 | 	addq %rax,%rbx    # src++
0x349: 30f00100000000000000 | 	irmovq $1,%rax
0x353: 6107                 | 	subq %rax,%rdi    # cnt--
0x355: 760903000000000000   | 	jg mcloop
0x35e:                      | checkpre:
                            | 	# Check for corruption
0x35e: 30f21004000000000000 | 	irmovq Predest,%rdx
0x368: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x372: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x37c: 6120                 | 	subq %rdx,%rax
0x37e: 739a03000000000000   | 	je checkpost
0x387: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x391: 70e003000000000000   | 	jmp cdone
0x39a:                      | checkpost:
                            | 	# Check for corruption
0x39a: 30f23004000000000000 | 	irmovq Postdest,%rdx
0x3a4: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x3ae: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x3b8: 6120                 | 	subq %rdx,%rax
0x3ba: 73d603000000000000   | 	je checkok
0x3c3: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x3cd: 70e003000000000000   | 	jmp cdone
0x3d6:                      | checkok:
                            | 	# Successful checks
0x3d6: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x3e0:                      | cdone:
0x3e0: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3e8:                      | 	.align 8
0x3e8:                      | src:
0x3e8: 0100000000000000     | 	.quad 1
0x3f0: 0200000000000000     | 	.quad 2
0x3f8: 0300000000000000     | 	.quad 3
0x400: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x410:                      | 	.align 16
0x410:                      | Predest:
0x410: fadebc0000000000     | 	.quad 0xbcdefa
0x418:                      | dest:
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430:                      | Postdest:
0x430: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x438:                      | .align 8
                            | # Run time stack
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
                            | 
0x4b8:                      | Stack:
