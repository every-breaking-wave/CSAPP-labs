                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4c003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f61803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # name: Feng Yifei ID:520030910021
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6222                 | 	andq %rdx,%rdx
0x034: 709202000000000000   | 	jmp Test
                            | 		
                            | 
0x03d: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x047: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x051: 62aa                 | 	andq %r10, %r10		# val1 <= 0?
0x053: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x05d: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x067: 717a00000000000000   | 	jle Npos			# if so ,goto Nops
0x070: c0f00100000000000000 | 	iaddq $1,%rax		# val1 > 0
                            | 	
0x07a: 6299                 | Npos:	andq %r9, %r9		# val2 <= 0?
0x07c: 718f00000000000000   | 	jle  Loop1			# if so, goto Nops
0x085: c0f00100000000000000 | 	iaddq $1, %rax		# val2 > 0
                            | 
0x08f: 50a71000000000000000 | Loop1:	mrmovq 16(%rdi), %r10	# read val from src...
0x099: 50971800000000000000 | 	mrmovq 24(%rdi), %r9
0x0a3: 62aa                 | 	andq %r10, %r10		# val1 <= 0?
0x0a5: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0af: 40961800000000000000 | 	rmmovq %r9, 24(%rsi)
0x0b9: 71cc00000000000000   | 	jle Npos1			# if so ,goto Nops
0x0c2: c0f00100000000000000 | 	iaddq $1,%rax		# val1 > 0
                            | 	
0x0cc: 6299                 | Npos1:	andq %r9, %r9		# val2 <= 0?
0x0ce: 71e100000000000000   | 	jle  Loop2			# if so, goto Nops
0x0d7: c0f00100000000000000 | 	iaddq $1, %rax		# val2 > 0
                            | 
0x0e1: 50a72000000000000000 | Loop2:	mrmovq 32(%rdi), %r10	# read val from src...
0x0eb: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x0f5: 62aa                 | 	andq %r10, %r10		# val1 <= 0?
0x0f7: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x101: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x10b: 711e01000000000000   | 	jle Npos2			# if so ,goto Nops
0x114: c0f00100000000000000 | 	iaddq $1,%rax		# val1 > 0
                            | 
0x11e:                      | Npos2:	
0x11e: c0f73000000000000000 | 	iaddq $48, %rdi		# rdi += 6
0x128: c0f63000000000000000 | 	iaddq $48, %rsi		# rsi += 6
0x132: 6299                 | 	andq %r9, %r9		# val2 <= 0?
0x134: 719202000000000000   | 	jle  Test			
0x13d: c0f00100000000000000 | 	iaddq $1, %rax		# val2 > 0
0x147: 709202000000000000   | 	jmp Test
                            | 
0x150:                      | Move:
0x150: c0f61800000000000000 | 	iaddq $24, %rsi
0x15a: c0f71800000000000000 | 	iaddq $24, %rdi
                            | 		
0x164:                      | Extra:	
0x164: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x16e: 62aa                 | 	andq %r10, %r10
0x170: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x17a: 71e702000000000000   | 	jle Done
0x183: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x18d: 70e702000000000000   | 	jmp Done
                            | 
0x196:                      | Move1:
0x196: c0f61800000000000000 | 	iaddq $24, %rsi
0x1a0: c0f71800000000000000 | 	iaddq $24, %rdi
                            | 
0x1aa:                      | Extra1:				# 剩2个
0x1aa: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x1b4: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x1be: 62aa                 | 	andq %r10, %r10
0x1c0: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x1ca: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x1d4: 715602000000000000   | 	jle Pos
0x1dd: c0f00100000000000000 | 	iaddq $1, %rax
0x1e7: 705602000000000000   | 	jmp Pos
                            | 
                            | 
0x1f0:                      | Extra2:				# 剩3个	
0x1f0: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x1fa: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x204: 50b71000000000000000 | 	mrmovq 16(%rdi), %r11
0x20e: 62aa                 | 	andq %r10, %r10
0x210: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x21a: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x224: 40b61000000000000000 | 	rmmovq %r11, 16(%rsi)
0x22e: 714102000000000000   | 	jle Pos0
0x237: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x241:                      | Pos0:
0x241: 62bb                 | 	andq %r11,%r11
0x243: 715602000000000000   | 	jle Pos
0x24c: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x256:                      | Pos:
0x256: 6299                 | 	andq %r9, %r9
0x258: 716b02000000000000   | 	jle Pos1
0x261: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x26b:                      | Pos1:	
0x26b: 6222                 | 	andq %rdx,%rdx
0x26d: 71e702000000000000   | 	jle Done
0x276: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x280: 735001000000000000   | 	je Move
0x289: 709601000000000000   | 	jmp Move1 
                            | 	
0x292:                      | Test:
0x292: c0f2faffffffffffffff | 	iaddq $-6, %rdx	
0x29c: 753d00000000000000   | 	jge Loop		# if len >= 6, goto Loop:
                            | 
0x2a5:                      | Test1:
0x2a5: c0f20300000000000000 | 	iaddq $3, %rdx	
0x2af: 75f001000000000000   | 	jge Extra2	# len = 3，4，5
0x2b8: c0f20100000000000000 | 	iaddq $1, %rdx 
0x2c2: 73aa01000000000000   | 	je Extra1		# len = 2
0x2cb: c0f20100000000000000 | 	iaddq $1, %rdx	
0x2d5: 736401000000000000   | 	je Extra 		# len = 1
0x2de: 70e702000000000000   | 	jmp Done		# len = 0
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2e7:                      | Done:
0x2e7: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2e8:                      | End:
                            | #/* $end ncopy-ys */
0x2e8:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2e8:                      | 	.align 8
0x2e8:                      | src:
0x2e8: ffffffffffffffff     | 	.quad -1
0x2f0: 0200000000000000     | 	.quad 2
0x2f8: fdffffffffffffff     | 	.quad -3
0x300: 0400000000000000     | 	.quad 4
0x308: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x310:                      | 	.align 16
0x310:                      | Predest:
0x310: fadebc0000000000     | 	.quad 0xbcdefa
0x318:                      | dest:
0x318: abefcd0000000000     | 	.quad 0xcdefab
0x320: abefcd0000000000     | 	.quad 0xcdefab
0x328: abefcd0000000000     | 	.quad 0xcdefab
0x330: abefcd0000000000     | 	.quad 0xcdefab
0x338:                      | Postdest:
0x338: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x340:                      | .align 8
                            | # Run time stack
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
0x360: 0000000000000000     | 	.quad 0
0x368: 0000000000000000     | 	.quad 0
0x370: 0000000000000000     | 	.quad 0
0x378: 0000000000000000     | 	.quad 0
0x380: 0000000000000000     | 	.quad 0
0x388: 0000000000000000     | 	.quad 0
0x390: 0000000000000000     | 	.quad 0
0x398: 0000000000000000     | 	.quad 0
0x3a0: 0000000000000000     | 	.quad 0
0x3a8: 0000000000000000     | 	.quad 0
0x3b0: 0000000000000000     | 	.quad 0
0x3b8: 0000000000000000     | 	.quad 0
                            | 
0x3c0:                      | Stack:
